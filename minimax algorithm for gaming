import math

# Constants
PLAYER = 1
OPPONENT = -1
EMPTY = 0

def print_board(board):
    for row in board:
        print(row)
    print()

def is_moves_left(board):
    for row in board:
        if EMPTY in row:
            return True
    return False

def evaluate(board):
    # Check rows for victory
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != EMPTY:
            return 10 if row[0] == PLAYER else -10

    # Check columns for victory
    for col in range(len(board[0])):
        column = [row[col] for row in board]
        if column.count(column[0]) == len(column) and column[0] != EMPTY:
            return 10 if column[0] == PLAYER else -10

    # Check diagonals for victory
    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return 10 if board[0][0] == PLAYER else -10
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return 10 if board[0][2] == PLAYER else -10

    # No winner
    return 0

def minimax(board, depth, is_max):
    score = evaluate(board)

    # If player has won the game, return evaluated score
    if score == 10:
        return score - depth

    # If opponent has won the game, return evaluated score
    if score == -10:
        return score + depth

    # If no more moves and no winner, it is a tie
    if not is_moves_left(board):
        return 0

    # If this is the maximizer's move
    if is_max:
        best = -math.inf

        # Traverse all cells
        for i in range(len(board)):
            for j in range(len(board[0])):
                # Check if cell is empty
                if board[i][j] == EMPTY:
                    # Make the move
                    board[i][j] = PLAYER

                    # Call minimax recursively and choose the maximum value
                    best = max(best, minimax(board, depth + 1, not is_max))

                    # Undo the move
                    board[i][j] = EMPTY
        return best
    else:
        best = math.inf

        # Traverse all cells
        for i in range(len(board)):
            for j in range(len(board[0])):
                # Check if cell is empty
                if board[i][j] == EMPTY:
                    # Make the move
                    board[i][j] = OPPONENT

                    # Call minimax recursively and choose the minimum value
                    best = min(best, minimax(board, depth + 1, not is_max))

                    # Undo the move
                    board[i][j] = EMPTY
        return best

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    # Traverse all cells, evaluate minimax function for all empty cells
    # and return the cell with optimal value.
    for i in range(len(board)):
        for j in range(len(board[0])):
            # Check if cell is empty
            if board[i][j] == EMPTY:
                # Make the move
                board[i][j] = PLAYER

                # Compute evaluation function for this move
                move_val = minimax(board, 0, False)

                # Undo the move
                board[i][j] = EMPTY

                # If the value of the current move is more than the best value, update best
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

# Test the implementation
board = [
    [ PLAYER, OPPONENT, PLAYER],
    [ EMPTY, OPPONENT, EMPTY],
    [ EMPTY, PLAYER, EMPTY]
]

print("Current board state:")
print_board(board)

best_move = find_best_move(board)
print(f"The best move is at position: {best_move}")
