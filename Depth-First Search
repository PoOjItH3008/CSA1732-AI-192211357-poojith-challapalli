def dfs_recursive(graph, start_node, visited=None):
    """
    Perform DFS on a graph starting from the start_node using recursion.

    Parameters:
    graph (dict): A dictionary where keys are nodes and values are lists of adjacent nodes.
    start_node: The starting node for DFS.
    visited (set): A set to keep track of visited nodes.

    Returns:
    list: A list of nodes in the order they were visited.
    """
    if visited is None:
        visited = set()

    visited.add(start_node)
    dfs_order = [start_node]

    for neighbor in graph[start_node]:
        if neighbor not in visited:
            dfs_order.extend(dfs_recursive(graph, neighbor, visited))

    return dfs_order

# Example usage:
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    start_node = 'A'
    dfs_result = dfs_recursive(graph, start_node)
    print("DFS Order:", dfs_result)
